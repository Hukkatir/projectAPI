// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(projectDBContext))]
    partial class projectDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CommentMedium", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.HasKey("MediaId", "CommentId")
                        .HasName("PK__CommentM__0EF9F855E39D6785");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentMedia", (string)null);
                });

            modelBuilder.Entity("Domian.Models.CategoryContent", b =>
                {
                    b.Property<int>("CategoryContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryContentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryContentId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryContentId");

                    b.ToTable("CategoryContent", (string)null);
                });

            modelBuilder.Entity("Domian.Models.CategoryFile", b =>
                {
                    b.Property<int>("CategoryFileId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryFileID");

                    b.Property<string>("CategoryFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryFileId");

                    b.ToTable("CategoryFile", (string)null);
                });

            modelBuilder.Entity("Domian.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domian.Models.CommentRate", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<int>("CommentRateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentRates");
                });

            modelBuilder.Entity("Domian.Models.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<int>("CategoryContentId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryContentID");

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("ContentId");

                    b.HasIndex("CategoryContentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "MediaId" }, "IX_Relationship13");

                    b.ToTable("Content", (string)null);
                });

            modelBuilder.Entity("Domian.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<int>("CategoryFileId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryFileID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FileURL");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("FileId");

                    b.HasIndex("CategoryFileId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("Domian.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domian.Models.GroupMedium", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupDescrip")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("GroupId");

                    b.ToTable("GroupMedia");
                });

            modelBuilder.Entity("Domian.Models.MediaFile", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    b.Property<int>("MediaFileId")
                        .HasColumnType("int")
                        .HasColumnName("MediaFileID");

                    b.Property<int>("FileId")
                        .HasColumnType("int")
                        .HasColumnName("FileID");

                    b.Property<string>("MediaFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MediaId", "MediaFileId", "FileId")
                        .HasName("PK__MoviesFi__54324C2672BE071C");

                    b.HasIndex("FileId");

                    b.ToTable("MediaFile", (string)null);
                });

            modelBuilder.Entity("Domian.Models.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MediaTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaTypeId"), 1L, 1);

                    b.Property<string>("MediaTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MediaTypeId");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("Domian.Models.Medium", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Episode")
                        .HasColumnType("int");

                    b.Property<decimal?>("ImdbRating")
                        .HasColumnType("decimal(2,1)")
                        .HasColumnName("IMDbRating");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MediaTypeID");

                    b.Property<string>("Plot")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("MediaId")
                        .HasName("PK__Media__B2C2B5AFF301C78A");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Domian.Models.MessagesUser", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<DateTime>("SendingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusMessageId")
                        .HasColumnType("int")
                        .HasColumnName("StatusMessageID");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__C87C037CCA0314D6");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RoomId");

                    b.HasIndex("StatusMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages_users", (string)null);
                });

            modelBuilder.Entity("Domian.Models.MyRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RatingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("RatingId")
                        .HasName("PK__MyRating__FCCDF85CB1473DD3");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("MyRatings");
                });

            modelBuilder.Entity("Domian.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("CVV")
                        .IsFixedLength();

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Domian.Models.PaymentUser", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.HasKey("PaymentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentUsers");
                });

            modelBuilder.Entity("Domian.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domian.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("DeletedDateTime")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RoomId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MediaId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domian.Models.RoomsUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<DateTime>("JoinedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomsUsers");
                });

            modelBuilder.Entity("Domian.Models.StatusMessage", b =>
                {
                    b.Property<int>("StatusMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusMessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusMessageId"), 1L, 1);

                    b.Property<string>("StatusMessageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusMessageId");

                    b.ToTable("StatusMessage", (string)null);
                });

            modelBuilder.Entity("Domian.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E47D398155")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105340127C76C")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MediaGenre", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.HasKey("MediaId", "GenreId")
                        .HasName("PK__MediaGen__42FAE5FA05E52893");

                    b.HasIndex("GenreId");

                    b.ToTable("MediaGenres", (string)null);
                });

            modelBuilder.Entity("RelatedMedium", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    b.HasKey("GroupId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("RelatedMedia", (string)null);
                });

            modelBuilder.Entity("CommentMedium", b =>
                {
                    b.HasOne("Domian.Models.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK__CommentMe__Comme__70DDC3D8");

                    b.HasOne("Domian.Models.Medium", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("FK__CommentMe__Media__6FE99F9F");
                });

            modelBuilder.Entity("Domian.Models.Comment", b =>
                {
                    b.HasOne("Domian.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__UserID__693CA210");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.Models.CommentRate", b =>
                {
                    b.HasOne("Domian.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__CommentRa__UserI__6C190EBB");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.Models.Content", b =>
                {
                    b.HasOne("Domian.Models.CategoryContent", "CategoryContent")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryContentId")
                        .IsRequired()
                        .HasConstraintName("FK__Content__Categor__778AC167");

                    b.HasOne("Domian.Models.User", "CreatedByNavigation")
                        .WithMany("ContentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Content__Created__787EE5A0");

                    b.HasOne("Domian.Models.User", "DeletedByNavigation")
                        .WithMany("ContentDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Content__Deleted__7A672E12");

                    b.HasOne("Domian.Models.Medium", "Media")
                        .WithMany("Contents")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("Relationship13");

                    b.HasOne("Domian.Models.User", "UpdatedByNavigation")
                        .WithMany("ContentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Content__Updated__797309D9");

                    b.Navigation("CategoryContent");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Media");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Domian.Models.File", b =>
                {
                    b.HasOne("Domian.Models.CategoryFile", "CategoryFile")
                        .WithMany("Files")
                        .HasForeignKey("CategoryFileId")
                        .IsRequired()
                        .HasConstraintName("Relationship12");

                    b.HasOne("Domian.Models.User", "CreatedByNavigation")
                        .WithMany("FileCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Files__CreatedBy__4AB81AF0");

                    b.HasOne("Domian.Models.User", "DeletedByNavigation")
                        .WithMany("FileDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Files__DeletedBy__4CA06362");

                    b.HasOne("Domian.Models.User", "UpdatedByNavigation")
                        .WithMany("FileUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Files__UpdatedBy__4BAC3F29");

                    b.Navigation("CategoryFile");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Domian.Models.MediaFile", b =>
                {
                    b.HasOne("Domian.Models.File", "File")
                        .WithMany("MediaFiles")
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("FK__MoviesFil__FileI__5070F446");

                    b.HasOne("Domian.Models.Medium", "Media")
                        .WithMany("MediaFiles")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("FK__MoviesFil__Media__4F7CD00D");

                    b.Navigation("File");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Domian.Models.Medium", b =>
                {
                    b.HasOne("Domian.Models.User", "CreatedByNavigation")
                        .WithMany("MediumCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Media__CreatedBy__440B1D61");

                    b.HasOne("Domian.Models.User", "DeletedByNavigation")
                        .WithMany("MediumDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Media__DeletedBy__45F365D3");

                    b.HasOne("Domian.Models.MediaType", "MediaType")
                        .WithMany("Media")
                        .HasForeignKey("MediaTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Media__ContentTy__4316F928");

                    b.HasOne("Domian.Models.User", "UpdatedByNavigation")
                        .WithMany("MediumUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Media__UpdatedBy__44FF419A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("MediaType");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Domian.Models.MessagesUser", b =>
                {
                    b.HasOne("Domian.Models.User", "DeletedByNavigation")
                        .WithMany("MessagesUserDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Messages___Delet__0C85DE4D");

                    b.HasOne("Domian.Models.Room", "Room")
                        .WithMany("MessagesUsers")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("Relationship11");

                    b.HasOne("Domian.Models.StatusMessage", "StatusMessage")
                        .WithMany("MessagesUsers")
                        .HasForeignKey("StatusMessageId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages___Statu__0D7A0286");

                    b.HasOne("Domian.Models.User", "User")
                        .WithMany("MessagesUserUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Relationship10");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Room");

                    b.Navigation("StatusMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.Models.MyRating", b =>
                {
                    b.HasOne("Domian.Models.Medium", "Media")
                        .WithMany("MyRatings")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("FK__MyRatings__Media__6383C8BA");

                    b.HasOne("Domian.Models.User", "User")
                        .WithMany("MyRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__MyRatings__UserI__628FA481");

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.Models.PaymentUser", b =>
                {
                    b.HasOne("Domian.Models.Payment", "Payment")
                        .WithMany("PaymentUsers")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("Relationship14");

                    b.HasOne("Domian.Models.User", "User")
                        .WithMany("PaymentUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Relationship15");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.Models.Room", b =>
                {
                    b.HasOne("Domian.Models.User", "Creator")
                        .WithMany("RoomCreators")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("Relationship4");

                    b.HasOne("Domian.Models.User", "DeletedByNavigation")
                        .WithMany("RoomDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("Relationship9");

                    b.HasOne("Domian.Models.Medium", "Media")
                        .WithMany("Rooms")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("Relationship5");

                    b.Navigation("Creator");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Domian.Models.RoomsUser", b =>
                {
                    b.HasOne("Domian.Models.Room", "Room")
                        .WithMany("RoomsUsers")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("Relationship7");

                    b.HasOne("Domian.Models.User", "User")
                        .WithMany("RoomsUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Relationship6");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.Models.User", b =>
                {
                    b.HasOne("Domian.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleID__3C69FB99");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MediaGenre", b =>
                {
                    b.HasOne("Domian.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__MediaGenr__Genre__5629CD9C");

                    b.HasOne("Domian.Models.Medium", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("FK__MediaGenr__Media__5535A963");
                });

            modelBuilder.Entity("RelatedMedium", b =>
                {
                    b.HasOne("Domian.Models.GroupMedium", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("Relationship1");

                    b.HasOne("Domian.Models.Medium", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("Relationship2");
                });

            modelBuilder.Entity("Domian.Models.CategoryContent", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Domian.Models.CategoryFile", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domian.Models.File", b =>
                {
                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("Domian.Models.MediaType", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Domian.Models.Medium", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("MediaFiles");

                    b.Navigation("MyRatings");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domian.Models.Payment", b =>
                {
                    b.Navigation("PaymentUsers");
                });

            modelBuilder.Entity("Domian.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domian.Models.Room", b =>
                {
                    b.Navigation("MessagesUsers");

                    b.Navigation("RoomsUsers");
                });

            modelBuilder.Entity("Domian.Models.StatusMessage", b =>
                {
                    b.Navigation("MessagesUsers");
                });

            modelBuilder.Entity("Domian.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ContentCreatedByNavigations");

                    b.Navigation("ContentDeletedByNavigations");

                    b.Navigation("ContentUpdatedByNavigations");

                    b.Navigation("FileCreatedByNavigations");

                    b.Navigation("FileDeletedByNavigations");

                    b.Navigation("FileUpdatedByNavigations");

                    b.Navigation("MediumCreatedByNavigations");

                    b.Navigation("MediumDeletedByNavigations");

                    b.Navigation("MediumUpdatedByNavigations");

                    b.Navigation("MessagesUserDeletedByNavigations");

                    b.Navigation("MessagesUserUsers");

                    b.Navigation("MyRatings");

                    b.Navigation("PaymentUsers");

                    b.Navigation("RoomCreators");

                    b.Navigation("RoomDeletedByNavigations");

                    b.Navigation("RoomsUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
